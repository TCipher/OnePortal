@page "/change-password"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using OnePortal.Blazor.Components.Common
@using OnePortal.Blazor.Models
@using OnePortal.Blazor.Services.Auth
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager Nav
@inject OnePortal.Blazor.Services.Auth.AuthApi Api
@inject AuthService Auth

<EditForm EditContext="_edit" OnSubmit="DoChangePassword">
    <div class="reset-shell">
        <SideImagePanel ImageUrl="/login-assets/nightrender21369-obd-1300w.png"
                        Alt="Promotional photo"
                        Position="center"
                        MinHeight="220px"
                        Darken="false" />

        <div class="reset-right">
            <h1>Change Password</h1>

            <!-- Current Password -->
            <div class="field password">
                <label for="currentPass">Current Password</label>
                <div class="password-wrap">
                    <input id="currentPass"
                           class="input @(GetCurrentPwInputClass())"
                           type="@(showCurrentPwd ? "text" : "password")"
                           @bind="model.CurrentPassword"
                           @oninput="HandleCurrentPasswordInput"
                           placeholder="Enter your current password"
                           autocomplete="current-password" />

                    <button type="button"
                            class="toggle"
                            @onclick="ToggleCurrentPassword"
                            aria-label="@(showCurrentPwd ? "Hide password" : "Show password")"
                            title="@(showCurrentPwd ? "Hide password" : "Show password")">
                        <i class="bi @(showCurrentPwd ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => model.CurrentPassword)" class="validation-message" />
            </div>

            <!-- New Password -->
            <div class="field password">
                <label for="newPass">New Password</label>
                <div class="password-wrap">
                    <input id="newPass"
                           class="input @(GetPwInputClass())"
                           type="@(showPwd ? "text" : "password")"
                           @bind="model.Password"
                           @oninput="HandlePasswordInput"
                           placeholder="Enter your new password"
                           autocomplete="new-password" />

                    <button type="button"
                            class="toggle"
                            @onclick="TogglePassword"
                            aria-label="@(showPwd ? "Hide password" : "Show password")"
                            title="@(showPwd ? "Hide password" : "Show password")">
                        <i class="bi @(showPwd ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>

                <!-- Live strength meter -->
                <div class="pw-meter-wrap" aria-live="polite">
                    <div class="pw-meter">
                        <div class="bar" style="--pct: @pwPct"></div>
                    </div>
                    <div class="pw-label">@pwLabel</div>
                    <div class="pw-checks">
                        <div class="@(hasLen ? "ok" : "bad")"><span class="dot"></span>10+ chars</div>
                        <div class="@(hasUpper ? "ok" : "bad")"><span class="dot"></span>Uppercase</div>
                        <div class="@(hasLower ? "ok" : "bad")"><span class="dot"></span>Lowercase</div>
                        <div class="@(hasDigit ? "ok" : "bad")"><span class="dot"></span>Number</div>
                        <div class="@(hasSymbol ? "ok" : "bad")"><span class="dot"></span>Symbol</div>
                        <div class="@(hasNoSpace ? "ok" : "bad")"><span class="dot"></span>No spaces</div>
                    </div>
                </div>
                <ValidationMessage For="@(() => model.Password)" class="validation-message" />
            </div>

            <!-- Confirm Password -->
            <div class="field password">
                <label for="confirmPass">Confirm Password</label>
                <div class="password-wrap">
                    <input id="confirmPass"
                           class="input @(ConfirmOk ? "valid" : (string.IsNullOrEmpty(model.ConfirmPassword) ? "" : "invalid"))"
                           type="@(showPwd ? "text" : "password")"
                           @bind="model.ConfirmPassword"
                           @oninput="HandleConfirmPasswordInput"
                           placeholder="Confirm your password"
                           autocomplete="new-password" />

                    <button type="button"
                            class="toggle"
                            disabled
                            style="opacity:0; pointer-events:none;">
                        <i class="bi bi-eye"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => model.ConfirmPassword)" class="validation-message" />
            </div> 
         

            <button type="submit" class="btn primary" disabled="@IsDisabled">
                @(Busy ? "Changing…" : "Change Password")
            </button>

            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="error-message">@error</div>
            }
            @if (!string.IsNullOrWhiteSpace(ok))
            {
                <div class="ok-message">@ok</div>
            }
        </div>
    </div>
</EditForm>

@code {
    private readonly ChangePasswordModel model = new();
    private EditContext? _edit;
    private bool showPwd;
    private bool showCurrentPwd;
    private bool Busy;
    private string error = "";
    private string ok = "";

    // live strength state
    private int pwScore;
    private int pwPct;
    private string pwLabel = "Too weak";
    private bool hasLen, hasUpper, hasLower, hasDigit, hasSymbol, hasNoSpace;

    protected override async Task OnInitializedAsync()
    {
        _edit = new EditContext(model);
        _edit.OnFieldChanged += HandleFieldChanged;
        ComputeStrength(model.Password);
        
        // Auto-populate email with current user's email
        var user = Auth.GetPrincipal();
        var emailFromClaims = GetEmail(user);
        
        // If email not in claims, try to get from localStorage
        if (string.IsNullOrEmpty(emailFromClaims))
        {
            emailFromClaims = await Auth.GetEmailFromStorageAsync();
        }
        
        // If still no email, try to extract from JWT token
        if (string.IsNullOrEmpty(emailFromClaims))
        {
            var token = await Auth.GetAccessTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                emailFromClaims = ExtractEmailFromToken(token);
            }
        }
        
        model.Email = emailFromClaims ?? string.Empty;
        
        Console.WriteLine($"Email populated: '{model.Email}'");
    }

    private bool ConfirmOk => 
        !string.IsNullOrEmpty(model.ConfirmPassword) && model.Password == model.ConfirmPassword;

    private bool IsDisabled
    {
        get
        {
            // Check all requirements
            var hasCurrentPassword = !string.IsNullOrWhiteSpace(model.CurrentPassword);
            var hasNewPassword = !string.IsNullOrWhiteSpace(model.Password);
            var passwordsMatch = model.Password == model.ConfirmPassword;
            var passwordLongEnough = model.Password.Length >= 10;
            var hasEmail = !string.IsNullOrWhiteSpace(model.Email);
            
            var isDisabled = !hasCurrentPassword || !hasNewPassword || !passwordsMatch || !passwordLongEnough || !hasEmail || Busy;
            
            return isDisabled;
        }
    }

    private async Task DoChangePassword()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(model.CurrentPassword))
        {
            error = "Current password is required.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(model.Password))
        {
            error = "New password is required.";
            return;
        }
        
        if (model.Password.Length < 10)
        {
            error = "New password must be at least 10 characters long.";
            return;
        }
        
        if (model.Password != model.ConfirmPassword)
        {
            error = "Passwords do not match.";
            return;
        }

        Busy = true;
        error = "";
        ok = "";
        try
        {
            Console.WriteLine($"Sending ChangePasswordRequest: Email='{model.Email}', CurrentPassword='{model.CurrentPassword}', NewPassword='{model.Password}'");
            var request = new ChangePasswordRequest(model.Email, model.CurrentPassword, model.Password);
            var res = await Api.ChangePasswordAsync(request);
            if (res?.Ok == true)
            {
                ok = "Password changed successfully! Redirecting to login...";
                await Task.Delay(2000);
                await Auth.ForceReloginAsync();
            }
            else
            {
                error = res?.Error ?? "Failed to change password. Please check your current password and try again.";
            }
        }
        catch
        {
            error = "Failed to change password.";
        }
        finally
        {
            Busy = false;
        }
    }

    private void TogglePassword() => showPwd = !showPwd;
    private void ToggleCurrentPassword() => showCurrentPwd = !showCurrentPwd;

    private void HandleCurrentPasswordInput(ChangeEventArgs e)
    {
        model.CurrentPassword = e.Value?.ToString() ?? string.Empty;
        _edit?.NotifyFieldChanged(_edit.Field(nameof(model.CurrentPassword)));
        ComputeStrength(model.Password);
        StateHasChanged();
    }

    private void HandlePasswordInput(ChangeEventArgs e)
    {
        model.Password = e.Value?.ToString() ?? string.Empty;
        _edit?.NotifyFieldChanged(_edit.Field(nameof(model.Password)));
        ComputeStrength(model.Password);
        StateHasChanged();
    }

    private void HandleConfirmPasswordInput(ChangeEventArgs e)
    {
        model.ConfirmPassword = e.Value?.ToString() ?? string.Empty;
        _edit?.NotifyFieldChanged(_edit.Field(nameof(model.ConfirmPassword)));
        ComputeStrength(model.Password);
        StateHasChanged();
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(ChangePasswordModel.Password))
        {
            ComputeStrength(model.Password);
            StateHasChanged();
        }
    }

    private void ComputeStrength(string? pwd)
    {
        var p = pwd ?? string.Empty;

        hasLen = p.Length >= 10;
        hasUpper = p.Any(char.IsUpper);
        hasLower = p.Any(char.IsLower);
        hasDigit = p.Any(char.IsDigit);
        hasSymbol = p.Any(ch => !char.IsLetterOrDigit(ch));
        hasNoSpace = !p.Any(char.IsWhiteSpace);

        // base score out of 5
        pwScore = 0;
        if (hasLen) pwScore++;
        if (hasUpper) pwScore++;
        if (hasLower) pwScore++;
        if (hasDigit) pwScore++;
        if (hasSymbol) pwScore++;

        // bonus for extra length
        if (p.Length >= 14 && pwScore < 5) pwScore++;

        // clamp 0..5
        pwScore = Math.Min(pwScore, 5);

        // percentage & label
        pwPct = pwScore switch { 0 => 0, 1 => 20, 2 => 40, 3 => 60, 4 => 80, _ => 100 };
        pwLabel = pwScore switch {
            0 or 1 => "Too weak",
            2 => "Weak",
            3 => "Fair",
            4 => "Strong",
            _ => "Very strong"
        };
    }

    private string GetPwInputClass()
        => pwScore >= 4 ? "valid"
         : string.IsNullOrEmpty(model.Password) ? ""
         : "invalid";

    private string GetCurrentPwInputClass()
        => string.IsNullOrEmpty(model.CurrentPassword) ? "" : "valid";

    private static string? GetEmail(ClaimsPrincipal user)
        => user?.FindFirst(ClaimTypes.Email)?.Value
           ?? user?.FindFirst("email")?.Value;

    private static string? ExtractEmailFromToken(string token)
    {
        try
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jsonToken = handler.ReadJwtToken(token);
            return jsonToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email || c.Type == "email")?.Value;
        }
        catch
        {
            return null;
        }
    }

    public sealed class ChangePasswordModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required, MinLength(1)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required, MinLength(10)]
        public string Password { get; set; } = string.Empty;

        [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}