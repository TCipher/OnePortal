@page "/forgot-password"
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@layout EmptyLayout
@inject NavigationManager Nav
@using System.ComponentModel.DataAnnotations
@inject OnePortal.Blazor.Services.Auth.AuthApi Api

<EditForm Model="@model" OnValidSubmit="Send">
    <DataAnnotationsValidator />
    <div class="forgot-shell">
        <div class="forgot-left">
            <!-- Optional image; remove if not needed -->
            <img src="/login-assets/nightrender21369-obd-1300w.png"
                 alt="Promotional photo"
                 class="forgot-img" />
        </div>

        <div class="forgot-right">
            <h1>Forgot Password</h1>

            <div class="field">
                <label for="email">Email</label>
                <input id="email"
                       class="input"
                       type="email"
                       @bind="model.Email"
                       @bind:event="oninput"
                       placeholder="Enter your email"
                       autocomplete="email" />
                <ValidationMessage For="@(() => model.Email)" class="validation-message" />
            </div>

            <button type="submit" class="btn primary" disabled="@Busy">
                @(Busy ? "Sending..." : "Send Reset Link")
            </button>


            @if (!string.IsNullOrWhiteSpace(msg))
            {
                <div class="ok-message">@msg</div>
            }
            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="error-message">@error</div>
            }
        </div>
    </div>
</EditForm>

@code {
    private ForgotModel model = new();
    private bool Busy;
    private string? msg;
    private string? error;

    public class ForgotModel
    {
        [Required]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;
    }

    private async Task Send()
    {
        Busy = true;
        error = null;
        msg = null;

        try
        {
            var res = await Api.ForgotPasswordAsync(new(model.Email));
            if (res?.Ok == true)
                msg = "If the email exists, a link was sent.";
            else
                error = res?.Error ?? "Failed.";
        }
        catch
        {
            error = "Unexpected error. Please try again later.";
        }
        finally
        {
            Busy = false;
        }
    }
}
