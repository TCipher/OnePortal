@page "/reset-password"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using OnePortal.Blazor.Components.Common
@inject NavigationManager Nav
@inject OnePortal.Blazor.Services.Auth.AuthApi Api

<EditForm EditContext="_edit" OnValidSubmit="DoReset">
    <DataAnnotationsValidator />
    <div class="reset-shell">
        <SideImagePanel ImageUrl="/login-assets/nightrender21369-obd-1300w.png"
                        Alt="Promotional photo"
                        Position="center"
                        MinHeight="220px"
                        Darken="false" />

        <div class="reset-right">
            <h1>Reset Password</h1>

            <!-- New Password -->
            <div class="field password">
                <label for="newPass">New Password</label>
                <div class="password-wrap">
                    <input id="newPass"
                           class="input @(GetPwInputClass())"
                           type="@(showPwd ? "text" : "password")"
                           @bind-value="model.Password"
                           placeholder="Enter your new password"
                           autocomplete="new-password" />

                    <button type="button"
                            class="toggle"
                            @onclick="TogglePassword"
                            aria-label="@(showPwd ? "Hide password" : "Show password")"
                            title="@(showPwd ? "Hide password" : "Show password")">
                        <i class="bi @(showPwd ? "bi-eye-slash" : "bi-eye")"></i>
                    </button>
                </div>

                <!-- Live strength meter -->
                <div class="pw-meter-wrap" aria-live="polite">
                    <div class="pw-meter" style="--pct:@pwPct">
                        <div class="bar"></div>
                    </div>
                    <div class="pw-label">@pwLabel (@pwPct%)</div>

                    <!-- Live checklist -->
                    <div class="pw-checks">
                        <div class="@(hasLen ? "ok" : "bad")"><span class="dot"></span>Min 10 characters</div>
                        <div class="@(hasUpper ? "ok" : "bad")"><span class="dot"></span>Uppercase (A-Z)</div>
                        <div class="@(hasLower ? "ok" : "bad")"><span class="dot"></span>Lowercase (a-z)</div>
                        <div class="@(hasDigit ? "ok" : "bad")"><span class="dot"></span>Number (0-9)</div>
                        <div class="@(hasSymbol ? "ok" : "bad")"><span class="dot"></span>Symbol (!@@#…)</div>
                        <div class="@(hasNoSpace ? "ok" : "bad")"><span class="dot"></span>No spaces</div>
                    </div>
                </div>

                <ValidationMessage For="@(() => model.Password)" class="validation-message" />
            </div>

            <!-- Confirm Password -->
            <div class="field password">
                <label for="confirmPass">Confirm Password</label>
                <div class="password-wrap">
                    <input id="confirmPass"
                           class="input @(ConfirmOk ? "valid" : (string.IsNullOrEmpty(model.ConfirmPassword) ? "" : "invalid"))"
                           type="@(showPwd ? "text" : "password")"
                           @bind-value="model.ConfirmPassword"
                           @bind-value:event="oninput"
                           placeholder="Confirm your password"
                           autocomplete="new-password" />

                    <button type="button"
                            class="toggle"
                            disabled
                            style="opacity:0; pointer-events:none;">
                        <i class="bi bi-eye"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => model.ConfirmPassword)" class="validation-message" />
            </div> 
         


            <button type="submit" class="btn primary" disabled="@Busy || IsDisabled">
                @(Busy ? "Resetting…" : "Reset")
            </button>

            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="error-message">@error</div>
            }
            @if (!string.IsNullOrWhiteSpace(ok))
            {
                <div class="ok-message">@ok</div>
            }
        </div>
    </div>
</EditForm>

@code {
    private readonly ResetModel model = new();
    private EditContext? _edit;
    private bool showPwd;
    private bool Busy;
    private string error = "";
    private string ok = "";
    private string token = "";

    // live strength state
    private int pwScore;
    private int pwPct;
    private string pwLabel = "Too weak";
    private bool hasLen, hasUpper, hasLower, hasDigit, hasSymbol, hasNoSpace;

    protected override void OnInitialized()
    {
        _edit = new EditContext(model);
        _edit.OnFieldChanged += HandleFieldChanged;

        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
        token = q["token"] ?? string.Empty;

        ComputeStrength(model.Password);
    }

    private bool ConfirmOk => 
        !string.IsNullOrEmpty(model.ConfirmPassword) && model.Password == model.ConfirmPassword;

    private bool IsDisabled =>
        string.IsNullOrWhiteSpace(token)
        || model.Password != model.ConfirmPassword
        || !OnePortal.Blazor.Services.Auth.PasswordPolicy.MeetsPolicy(model.Password, 10)
        || pwScore < 4; // require strong/very strong

    private async Task DoReset()
    {
        Busy = true;
        error = "";
        ok = "";
        try
        {
            var res = await Api.ResetPasswordAsync(new(token, model.Password));
            if (res?.Ok == true)
            {
                ok = "Password reset. You can login now.";
                Nav.NavigateTo("/login", true);
            }
            else
            {
                error = res?.Error ?? "Failed.";
            }
        }
        catch
        {
            error = "Failed to reset password.";
        }
        finally
        {
            Busy = false;
        }
    }

    private void TogglePassword() => showPwd = !showPwd;

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(ResetModel.Password))
        {
            ComputeStrength(model.Password);
            StateHasChanged();
        }
    }

    private void ComputeStrength(string? pwd)
    {
        var p = pwd ?? string.Empty;

        hasLen = p.Length >= 10;
        hasUpper = p.Any(char.IsUpper);
        hasLower = p.Any(char.IsLower);
        hasDigit = p.Any(char.IsDigit);
        hasSymbol = p.Any(ch => !char.IsLetterOrDigit(ch));
        hasNoSpace = !p.Any(char.IsWhiteSpace);

        // base score out of 5
        pwScore = 0;
        if (hasLen) pwScore++;
        if (hasUpper) pwScore++;
        if (hasLower) pwScore++;
        if (hasDigit) pwScore++;
        if (hasSymbol) pwScore++;

        // bonus for extra length
        if (p.Length >= 14 && pwScore < 5) pwScore++;

        // clamp 0..5
        pwScore = Math.Min(pwScore, 5);

        // percentage & label
        pwPct = pwScore switch { 0 => 0, 1 => 20, 2 => 40, 3 => 60, 4 => 80, _ => 100 };
        pwLabel = pwScore switch {
            0 or 1 => "Too weak",
            2 => "Weak",
            3 => "Fair",
            4 => "Strong",
            _ => "Very strong"
        };
    }

    private string GetPwInputClass()
        => pwScore >= 4 ? "valid"
         : string.IsNullOrEmpty(model.Password) ? ""
         : "invalid";

    public sealed class ResetModel
    {
        [Required, MinLength(10)]
        public string Password { get; set; } = string.Empty;

        [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}
